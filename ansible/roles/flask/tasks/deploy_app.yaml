---
- name: sync project code from local dir
  synchronize:
    src: '{{ local_project_dir }}'
    dest: '{{ project_dir }}'
    recursive: yes
    delete: yes
    verify_host: yes
    rsync_opts:
      - "--exclude=*.pyc"
      - "--exclude=__pycache__"
      - "--exclude=ansible"
  tags: flask

- name: create uwsgi.ini file
  template:
    src: uwsgi.ini.j2
    dest: '{{ project_dir }}/uwsgi.ini'
  tags: flask

- name: clear .pyc files
  command: find . -name '*.pyc' -delete
  args:
    chdir: '{{ project_dir }}'
  changed_when: False
  tags: flask

- name: make sure static files dir exists
  file:
    path: '{{ FLASK_STATIC_FOLDER }}'
    owner: '{{ nginx_user }}'
    group: '{{ nginx_user }}'
    state: directory
  tags: flask.static_files

- name: copy static files
  synchronize:
    src: '{{ local_project_dir }}/static/'
    dest: '{{ FLASK_STATIC_FOLDER }}'
    recursive: yes
    delete: yes
  tags: flask.static_files

- name: set ownership of static files to {{ nginx_user }}
  file:
    path: '{{ FLASK_STATIC_FOLDER }}'
    owner: '{{ nginx_user }}'
    group: '{{ nginx_user }}'
    state: directory
    recurse: yes
  tags: flask.static_files

- name: install packages from requirements.txt
  pip: virtualenv={{ project_virtualenv_dir }} requirements={{ requirements_path }}

- name: run database migrations
  when: run_migrations is defined and run_migrations
  command: "{{ project_virtualenv_dir }}/bin/{{ python3 }} manage.py --env=prod --no-warn db upgrade"
  args:
    chdir: '{{ project_dir }}'
  tags: flask.run_migrations

- name: run database fixtures
  when: run_fixtures is defined and run_fixtures
  command: "{{ project_virtualenv_dir }}/bin/{{ python3 }} manage.py --env=prod --no-warn load_fixtures fixtures.json --reset"
  args:
    chdir: '{{ project_dir }}'
  tags: flask.run_fixtures
