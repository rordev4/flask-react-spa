---
- name: Install letsencrypt dependencies
  package: name={{ item }} state=present
  with_items: '{{ letsencrypt_depends }}'

- name: create lets encrypt viritualenv
  command: virtualenv -p {{ python3_path }} {{ letsencrypt_venv }}
           creates={{ letsencrypt_venv }}/bin/activate

- name: Install letsencrypt
  pip:
    virtualenv: '{{ letsencrypt_venv }}'
    virtualenv_site_packages: no
    name: certbot
    state: latest

- name: Ensure webroots exist
  file:
    path: '{{ item.webroot }}'
    state: directory
    follow: yes
  with_items: '{{ letsencrypt_cert_domains }}'

- name: get certificates using the webroot authenticator
  command: '{{ certbot }} -n --agree-tos  {% if letsencrypt_rsa_key_size is defined %}--rsa-key-size {{ letsencrypt_rsa_key_size }}{% endif %} --text {% for domain in item.domains %}-d {{ domain }} {% endfor %}--email {{ letsencrypt_email }} {% if letsencrypt_server is defined %}--server {{ letsencrypt_server }}{% endif %} --expand --webroot --webroot-path {{ item.webroot }} certonly'
  args:
    creates: '/etc/letsencrypt/live/{{ item.domains[0] }}'
  when: letsencrypt_authenticator == 'webroot'
  with_items: '{{ letsencrypt_cert_domains }}'

- name: add nginx reverse proxy config
  template:
    src: flask_app_https.nginx.j2
    dest: '{{ nginx_sites_available_dir }}/{{ project_name }}'
  tags: flask.deploy
  notify: reload nginx

- include: fix_renewal_file.yaml
  with_items: '{{ letsencrypt_cert_domains }}'
  loop_control:
    loop_var: cert_domain

- name: Install renewal cron
  cron:
    name: "Let's Encrypt Renewal"
    day: '{{ letsencrypt_renewal_frequency.day }}'
    hour: '{{ letsencrypt_renewal_frequency.hour }}'
    minute: '{{ letsencrypt_renewal_frequency.minute }}'
    job: '{{ letsencrypt_venv }}/bin/letsencrypt renew --quiet {{ letsencrypt_renewal_command_args }} >> /var/log/letsencrypt/auto-renew.log 2>&1'
